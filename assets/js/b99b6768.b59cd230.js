"use strict";(self.webpackChunkevantay_com=self.webpackChunkevantay_com||[]).push([[3882],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return d}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),s=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=s(e.components);return n.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(a),d=r,h=p["".concat(o,".").concat(d)]||p[d]||m[d]||i;return a?n.createElement(h,l(l({ref:t},u),{},{components:a})):n.createElement(h,l({ref:t},u))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,l=new Array(i);l[0]=p;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var s=2;s<i;s++)l[s]=a[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},2224:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return m}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],c={title:"Scaling Memcached"},o=void 0,s={unversionedId:"scaling-memcached",id:"scaling-memcached",title:"Scaling Memcached",description:"Published on April 14, 2021",source:"@site/docs/scaling-memcached.md",sourceDirName:".",slug:"/scaling-memcached",permalink:"/docs/scaling-memcached",draft:!1,tags:[],version:"current",frontMatter:{title:"Scaling Memcached"},sidebar:"docs",previous:{title:"Reading List",permalink:"/docs/reading-list"},next:{title:"Reliable, Scalable, and Maintainable Applications",permalink:"/docs/reliable-scalable-maintainable"}},u={},m=[{value:"Context",id:"context",level:2},{value:"Key takeaways",id:"key-takeaways",level:2},{value:"References",id:"references",level:2}],p={toc:m};function d(e){var t=e.components,a=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Published on April 14, 2021"),(0,i.kt)("p",null,"Article review for ",(0,i.kt)("a",{parentName:"p",href:"https://levelup.gitconnected.com/lessons-learnt-from-scaling-memcached-in-production-86778ab616c7"},"Melodies Sim's Medium Article: Lessons Learnt from Scaling Memcached in Production")),(0,i.kt)("h2",{id:"context"},"Context"),(0,i.kt)("p",null,"Memcached is a(n):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In-memory cache typically used for look-aside caching",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Look-aside versus look-through caching: see slides 14 and 15 of ",(0,i.kt)("a",{parentName:"li",href:"https://www.cs.princeton.edu/courses/archive/fall19/cos316/lectures/08-caching.pdf"},"Princeton COS 316 Intro to Caching")),(0,i.kt)("li",{parentName:"ul"},"Look-aside caching: client requests item from backing store (database) on cache miss; simpler implementation, more flexible, slower on misses"),(0,i.kt)("li",{parentName:"ul"},"Look-through caching: cache requests item from backing store on cache miss; harder implementation, less flexible, better consistency"))),(0,i.kt)("li",{parentName:"ul"},"Simple implementation without built-in high availability features"),(0,i.kt)("li",{parentName:"ul"},"Used by planet-scale companies such as Facebook and Twitter")),(0,i.kt)("p",null,"The article discusses strategies for building caches with high availability and strong data consistency."),(0,i.kt)("h2",{id:"key-takeaways"},"Key takeaways"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://sites.cs.ucsb.edu/~agrawal/fall2009/dynamo.pdf"},"Trade-off between ACID (C stands for consistency) properties and availability")),(0,i.kt)("li",{parentName:"ul"},"Memcached can be used as Authoritative Storage via Remote Marker mechanism",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Mechanism used to minimize probability of reading stale data in DB replicas"),(0,i.kt)("li",{parentName:"ul"},"When the client writes to the master DB, there is a replication delay between it and its replicas"),(0,i.kt)("li",{parentName:"ul"},"The client will write a marker to Memcached after writing to the master DB"),(0,i.kt)("li",{parentName:"ul"},"Marker will have a short TTL - duration depending on DB replication delay"),(0,i.kt)("li",{parentName:"ul"},"If marker exists, read from the master DB; otherwise read from DB replica"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Writes are not idempotent nor commutative; deletes are."),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"If we write to DB then write to cache naively, race conditions will arise when there are concurrent writes as writes are non-commutative",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Leads to infinitely stale data given writes and no eventual data consistency"))),(0,i.kt)("li",{parentName:"ul"},"To avoid this issue, use delete instead: after writing to DB, do cache invalidation by deleting the data item from the cache",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Multiple deletes sent to the cache would not matter as you can only delete something once; ordering of delete doesn't matter too"),(0,i.kt)("li",{parentName:"ul"},"Client will fetch the data item from the database on cache miss and update the most recent value to Memcached instead"))),(0,i.kt)("li",{parentName:"ul"},"There is still a small risk of stale data, if a delete occurs between a cache read and set (see Melodies's article for illustration)",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Facebook deals with it using a check-and-set approach via a lease mechanism"),(0,i.kt)("li",{parentName:"ul"},"On cache miss, client receives a lease token for the requested key"),(0,i.kt)("li",{parentName:"ul"},"On cache set, client verifies the lease token before setting the key"),(0,i.kt)("li",{parentName:"ul"},"If Memcached receive a delete request for the key, the lease is invalidated")))))),(0,i.kt)("h2",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://levelup.gitconnected.com/lessons-learnt-from-scaling-memcached-in-production-86778ab616c7"},"Melodies Sim's Medium Article: Lessons Learnt from Scaling Memcached in Production")," - good introduction to Memcached in Production, has more references"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://research.fb.com/wp-content/uploads/2016/11/scaling-memcache-at-facebook.pdf"},"Scaling Memcache at Facebook")," - the paper the article was based upon"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.cs.princeton.edu/courses/archive/fall19/cos316/lectures/08-caching.pdf"},"Princeton COS 316 Intro to Caching")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://sites.cs.ucsb.edu/~agrawal/fall2009/dynamo.pdf"},"Dynamo: Amazon\u2019s Highly Available Key-value Store"))))}d.isMDXComponent=!0}}]);