"use strict";(self.webpackChunkevantay_com=self.webpackChunkevantay_com||[]).push([[1038],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,k=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(k,o(o({ref:t},s),{},{components:n})):r.createElement(k,o({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2511:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],l={title:"Docker Cheatsheet"},c=void 0,p={unversionedId:"docker-cheatsheet",id:"docker-cheatsheet",title:"Docker Cheatsheet",description:"Published on December 24, 2020",source:"@site/docs/docker-cheatsheet.md",sourceDirName:".",slug:"/docker-cheatsheet",permalink:"/docs/docker-cheatsheet",draft:!1,tags:[],version:"current",frontMatter:{title:"Docker Cheatsheet"},sidebar:"docs",previous:{title:"Ikigai",permalink:"/docs/ikigai"},next:{title:"GKE Cheatsheet",permalink:"/docs/gcp-gke-cheatsheet"}},s={},u=[{value:"Useful Docker commands",id:"useful-docker-commands",level:2},{value:"Starting an interactive shell",id:"starting-an-interactive-shell",level:3},{value:"Stopping and removing containers",id:"stopping-and-removing-containers",level:3},{value:"Inspecting container metadata",id:"inspecting-container-metadata",level:3},{value:"Viewing container logs",id:"viewing-container-logs",level:3},{value:"Docker and Github",id:"docker-and-github",level:2},{value:"Deploy script",id:"deploy-script",level:3},{value:"Resources",id:"resources",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Published on December 24, 2020"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"This document was migrated from ",(0,i.kt)("a",{parentName:"em",href:"https://digipie.github.io/digidocs/container/docker/"},"DigiDocs"))),(0,i.kt)("p",null,"In this section you will find my notes on using Docker for the deployment of Git projects."),(0,i.kt)("h2",{id:"useful-docker-commands"},"Useful Docker commands"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You do not have to write out the ",(0,i.kt)("inlineCode",{parentName:"p"},"CONTAINER_ID")," in full. The partial ",(0,i.kt)("inlineCode",{parentName:"p"},"CONTAINER_ID")," specified need only uniquely identify the container. Given a container 'aa151b912448' and 'aa153cd14238', ",(0,i.kt)("inlineCode",{parentName:"p"},"docker logs aa15")," will not work, but ",(0,i.kt)("inlineCode",{parentName:"p"},"docker logs aa151")," will.")),(0,i.kt)("h3",{id:"starting-an-interactive-shell"},"Starting an interactive shell"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker exec -it [CONTAINER_ID] bash\n")),(0,i.kt)("h3",{id:"stopping-and-removing-containers"},"Stopping and removing containers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker stop $(docker ps -q)\ndocker rm $(docker ps -aq)\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"docker ps")," options:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-q"),": Only display numeric IDs"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"-a"),": Show all containers (default shows just running)")),(0,i.kt)("h3",{id:"inspecting-container-metadata"},"Inspecting container metadata"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker inspect [CONTAINER_ID]\n")),(0,i.kt)("h3",{id:"viewing-container-logs"},"Viewing container logs"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Typical command:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker logs [CONTAINER_ID]\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Follow log output for a specified duration:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker logs -f --until=[TIME]\n")),(0,i.kt)("p",null,"TIME can be a TIMESTAMP or relative (e.g. '10m' or '5s')"),(0,i.kt)("h2",{id:"docker-and-github"},"Docker and Github"),(0,i.kt)("h3",{id:"deploy-script"},"Deploy script"),(0,i.kt)("p",null,"This script assumes that the working directory contains a ",(0,i.kt)("inlineCode",{parentName:"p"},".git")," directory, ",(0,i.kt)("inlineCode",{parentName:"p"},"Dockerfile")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"package.json"),". A ",(0,i.kt)("inlineCode",{parentName:"p"},".gitignore")," and a ",(0,i.kt)("inlineCode",{parentName:"p"},".dockerignore")," file may be useful too. It is also assumed that the project dependencies have been installed using ",(0,i.kt)("inlineCode",{parentName:"p"},"npm install"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"deploy.sh")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'IMAGE_NAME=""\nVERSION="" # Can be left blank\nCONTAINER_NAME=""\nCONTAINER_PORT="" # To be mapped to HOST_PORT\nHOST_PORT="" # The port clients will access\n\ndocker stop $CONTAINER_NAME # Stop the running container\ndocker system prune -af # Removes the container and all unused images\ngit pull origin master # Pulls latest source files and image\ndocker build -t $IMAGE_NAME .\ndocker run --name $CONTAINER_NAME -p $CONTAINER_PORT:$HOST_PORT -d $IMAGE_NAME:$VERSION\n')),(0,i.kt)("p",null,"Before the script can be used, replace the following placeholders:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"IMAGE_NAME")," : The name of your image."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"VERSION")," : The version of your image. Can be left blank."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CONTAINER_NAME")," : The desired name of your container."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CONTAINER_PORT")," : The port of your container which your application is running on."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"HOST_PORT")," : The host port your container port will be mapped to. This is the port that is exposed on the host system.")),(0,i.kt)("h2",{id:"resources"},"Resources"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://digipie.github.io/digidocs/container/docker/"},"Original copy of this document at DigiDocs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://www.digitalocean.com/community/tutorials/how-to-build-a-node-js-application-with-docker#step-4-%E2%80%94-using-a-repository-to-work-with-images"},"How To Build a Node.js Application with Docker")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/logs/"},"docker logs")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://docs.docker.com/engine/reference/commandline/ps/"},"docker ps"))))}m.isMDXComponent=!0}}]);