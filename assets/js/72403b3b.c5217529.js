"use strict";(self.webpackChunkevantay_com=self.webpackChunkevantay_com||[]).push([[3313],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,k=u["".concat(p,".").concat(m)]||u[m]||s[m]||o;return n?a.createElement(k,i(i({ref:t},c),{},{components:n})):a.createElement(k,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5991:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return s}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={title:"JS Cheatsheet"},p=void 0,d={unversionedId:"js-cheatsheet",id:"js-cheatsheet",title:"JS Cheatsheet",description:"Published on August 1, 2021",source:"@site/docs/js-cheatsheet.md",sourceDirName:".",slug:"/js-cheatsheet",permalink:"/docs/js-cheatsheet",draft:!1,tags:[],version:"current",frontMatter:{title:"JS Cheatsheet"},sidebar:"docs",previous:{title:"C Cheatsheet",permalink:"/docs/c-cheatsheet"},next:{title:"Git Cheatsheet",permalink:"/docs/git-cheatsheet"}},c={},s=[{value:"Var, Let and Const",id:"var-let-and-const",level:2},{value:"Resources",id:"resources",level:2}],u={toc:s};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Published on August 1, 2021"),(0,o.kt)("h2",{id:"var-let-and-const"},"Var, Let and Const"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://www.w3schools.com/Js/js_es6.asp"},"Javascript ES6")," introduced two new keywords to define variables, ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"const"),". Previously, the keyword ",(0,o.kt)("inlineCode",{parentName:"p"},"var")," was the only way to do so. ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"const")," were introduced because there were issues with ",(0,o.kt)("inlineCode",{parentName:"p"},"var")," which made it error-prone and hard to debug."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null}),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"th"},"var")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"th"},"let")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"th"},"const")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Scope"),(0,o.kt)("td",{parentName:"tr",align:null},"Global or Function"),(0,o.kt)("td",{parentName:"tr",align:null},"Block scope ",(0,o.kt)("inlineCode",{parentName:"td"},"{}")),(0,o.kt)("td",{parentName:"tr",align:null},"Block scope ",(0,o.kt)("inlineCode",{parentName:"td"},"{}"))),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Must be initialized when declared"),(0,o.kt)("td",{parentName:"tr",align:null},"No"),(0,o.kt)("td",{parentName:"tr",align:null},"No"),(0,o.kt)("td",{parentName:"tr",align:null},"Yes")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Can use before initialization"),(0,o.kt)("td",{parentName:"tr",align:null},"Yes"),(0,o.kt)("td",{parentName:"tr",align:null},"No"),(0,o.kt)("td",{parentName:"tr",align:null},"No")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Can be redeclared"),(0,o.kt)("td",{parentName:"tr",align:null},"Yes"),(0,o.kt)("td",{parentName:"tr",align:null},"No"),(0,o.kt)("td",{parentName:"tr",align:null},"No")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Can be updated"),(0,o.kt)("td",{parentName:"tr",align:null},"Yes"),(0,o.kt)("td",{parentName:"tr",align:null},"Yes"),(0,o.kt)("td",{parentName:"tr",align:null},"No")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"Hoisted to start of scope"),(0,o.kt)("td",{parentName:"tr",align:null},"Yes"),(0,o.kt)("td",{parentName:"tr",align:null},"Yes"),(0,o.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,o.kt)("p",null,"Avoid using ",(0,o.kt)("inlineCode",{parentName:"p"},"var")," because it is either global or function scope, and a declaration and assignment of a ",(0,o.kt)("inlineCode",{parentName:"p"},"var")," can easily be redeclared or updated unknowingly in another function. Furthermore, a ",(0,o.kt)("inlineCode",{parentName:"p"},"var")," is initialized with ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," and can be used even before being assigned a value."),(0,o.kt)("p",null,"On the other hand, ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"const")," are block scope, and cannot be redeclared. Additionally, ",(0,o.kt)("inlineCode",{parentName:"p"},"const")," cannot be updated. Both ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"const")," also cannot be used before initialization, and will throw ",(0,o.kt)("inlineCode",{parentName:"p"},"Reference error")," rather than return ",(0,o.kt)("inlineCode",{parentName:"p"},"undefined")," like ",(0,o.kt)("inlineCode",{parentName:"p"},"var"),"."),(0,o.kt)("admonition",{title:"Quote",type:"note"},(0,o.kt)("p",{parentName:"admonition"},'"Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution." - Sarah Chima Atuonwu, ',(0,o.kt)("a",{parentName:"p",href:"https://www.freecodecamp.org/news/var-let-and-const-whats-the-difference/"},"Var, Let, and Const \u2013 What's the Difference?"))),(0,o.kt)("h2",{id:"resources"},"Resources"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.freecodecamp.org/news/var-let-and-const-whats-the-difference/"},"Var, Let, and Const \u2013 What's the Difference?"))))}m.isMDXComponent=!0}}]);